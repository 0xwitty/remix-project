import { app, BrowserWindow, Menu } from 'electron';
import path from 'path';
import fixPath from 'fix-path';
import { add } from 'lodash';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

fixPath();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
export let mainWindow: BrowserWindow;
export const createWindow = (): void => {
  // generate unique id for this window
  const id = Date.now().toString();

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1024,
    webPreferences: {
       preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
       additionalArguments: [`--window-id=${id}`],
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.maximize();
  // Open the DevTools.
  //mainWindow.webContents.openDevTools();

  BrowserWindow.getAllWindows().forEach(window => {
    console.log('window IDS created', window.webContents.id)
  })
  require('./electron/engine')
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// when a window is closed event
app.on('web-contents-created', (event, contents) => {
  console.log('web-contents-created', contents.id)
})



// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here


const isMac = process.platform === 'darwin'

import shellMenu from './electron/menus/shell';
import { execCommand } from './electron/menus/commands';

const commandKeys: Record<string, string> = {
  'tab:new': 'CmdOrCtrl+T',
  'window:new': 'CmdOrCtrl+N',
  'pane:splitDown': 'CmdOrCtrl+D',
  'pane:splitRight': 'CmdOrCtrl+E',
  'pane:close': 'CmdOrCtrl+W',
  'window:close': 'CmdOrCtrl+Q',
};



const menu = [shellMenu(commandKeys, execCommand)]
Menu.setApplicationMenu(Menu.buildFromTemplate(menu))


//const menu = Menu.buildFromTemplate(shellMenu([], undefined))
//Menu.setApplicationMenu(menu)
