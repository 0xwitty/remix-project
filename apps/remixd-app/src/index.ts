import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { SlitherClient, HardhatClient, Sharedfolder } from '@remix-project/remixd/src/serviceList'
import Websocket from '@remix-project/remixd/src/websocket'
import os from 'os'
import fs from 'fs'

import { readConfig } from './config'
import { RemixdClient } from '@remix-project/remixd/src/services/remixdClient';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
let mainWindow: BrowserWindow | null = null;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.

let remixIdeUrl = 'http://localhost:8080'
let folder = './'

ipcMain.handle('startRemixd', async (event, url) => {
  console.log('startRemixd', url)
  remixIdeUrl = url
  await openFileDialog()
  await remixdStart()
})



let sharedFolderClient = new Sharedfolder()
let slitherClient = new SlitherClient()
let hardhatClient = new HardhatClient()

const services: any = {
  hardhat: () => {
    hardhatClient.options.customApi = {}
    return hardhatClient
  },
  slither: () => {
    slitherClient.options.customApi = {}
    return slitherClient
  },
  folder: () => {
    sharedFolderClient.options.customApi = {}
    return sharedFolderClient
  }
}

const openFileDialog = async () => {

  // open local file dialog
  const { filePaths } = await dialog.showOpenDialog({
    properties: ['openDirectory']
  })
  if (filePaths.length > 0) {
    folder = filePaths[0]
  }

  sharedFolderClient.sharedFolder(folder)
  sharedFolderClient.setupNotifications(folder)
  slitherClient.sharedFolder(folder)
  hardhatClient.sharedFolder(folder)
}


// Similar object is also defined in websocket.ts
const ports: any = {
  git: 65521,
  hardhat: 65522,
  slither: 65523,
  folder: 65520
}

function startService(service: string, callback: any) {
  try {
    const socket = new Websocket(ports[service], { remixIdeUrl }, () => services[service]())
    socket.start(callback)
  } catch (e) {
    console.error(e)
  }
}

// return either current folder in client, or the one in cache or by default the os homedir
function getFolder(client: { currentSharedFolder: any; }) {
  if (client.currentSharedFolder) return client.currentSharedFolder
  const cache = readConfig()
  if (cache) {
    try {
      const folder = cache.sharedFolder
      if (fs.existsSync(folder)) return folder
    } catch (e) {
    }
  }
  if (process.cwd()) {
    return process.cwd()
  } else
    return os.homedir()
}

let remixdStart = async () => {
  // electron GUI does not inherit the path from the terminal, this is a workaround

  console.log('start shared folder service')
  // send message to the renderer process
  mainWindow.webContents.send('message', 'start shared folder service')

  try {
    startService('folder', (ws: any, client: RemixdClient) => {
      client.setWebSocket(ws)
      client.sharedFolder(getFolder(client))
      client.setupNotifications(getFolder(client))
    })

    startService('slither', (ws: any, client: SlitherClient) => {
      client.setWebSocket(ws)
      client.sharedFolder(getFolder(client))
    })

    startService('hardhat', (ws: any, client: HardhatClient) => {
      client.setWebSocket(ws)
      client.sharedFolder(getFolder(client))
    })

  } catch (error) {
    throw new Error(error)
  }
}